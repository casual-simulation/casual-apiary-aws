service: 'casual-apiary-aws'
org: casualsimulation
app: casual-apiary

frameworkVersion: '2'

# Setup webpack
custom:
    webpack:
        webpackConfig: './webpack.config.js'
        includeModules: true
    serverless-offline:
        httpPort: 4000
        websocketPort: 4001
        lambdaPort: 4002
    dynamodb:
        stages:
            - dev
        start:
            migrate: true
    s3:
        host: localhost
        directory: ./.s3
        cors: ./s3-cors.xml
        allowMismatchedSignatures: true
    messagesBucket: 'aux-messages-bucket-${opt:stage}'

# Add the serverless-webpack plugin
plugins:
    [
        'serverless-webpack',
        'serverless-dynamodb-local',
        'serverless-s3-local',
        'serverless-offline',
    ]

provider:
    name: aws
    runtime: nodejs12.x
    profile: casualsimulation
    apiGateway:
        shouldStartNameWithService: true
        minimumCompressionSize: 1024
    environment:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
          Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/AtomsTable'
        - Effect: Allow
          Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
          Resource: 'arn:aws:s3:::messages-bucket/*'

functions:
    connect:
        handler: handler.connect
        events:
            - websocket:
                  route: $connect
    disconnect:
        handler: handler.disconnect
        events:
            - websocket:
                  route: $disconnect
    message:
        handler: handler.message
        environment:
            MESSAGES_BUCKET: '${self:custom.messagesBucket}'
        events:
            - websocket:
                  route: $default
resources:
    Resources:
        # A DynamoDB table that groups atoms by namespace
        AtomsTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: AtomsTable
                AttributeDefinitions:
                    - AttributeName: namespace
                      AttributeType: S
                    - AttributeName: atomHash
                      AttributeType: S
                KeySchema:
                    - AttributeName: namespace
                      KeyType: HASH
                    - AttributeName: atomHash
                      KeyType: RANGE
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1

        # A DynamoDB table that stores connections
        ConnectionsTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ConnectionsTable
                AttributeDefinitions:
                    - AttributeName: connectionId
                      AttributeType: S
                KeySchema:
                    - AttributeName: connectionId
                      KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1

        # A DynamoDB table that groups connections by namespace
        NamespaceConnectionsTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: NamespaceConnectionsTable
                AttributeDefinitions:
                    - AttributeName: namespace
                      AttributeType: S
                    - AttributeName: connectionId
                      AttributeType: S
                KeySchema:
                    - AttributeName: namespace
                      KeyType: HASH
                    - AttributeName: connectionId
                      KeyType: RANGE
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
                GlobalSecondaryIndexes:
                    - IndexName: ConnectionIdAndNamespaceIndex
                      KeySchema:
                          - AttributeName: connectionId
                            KeyType: HASH
                          - AttributeName: namespace
                            KeyType: RANGE
                      Projection:
                          ProjectionType: ALL
                      ProvisionedThroughput:
                          ReadCapacityUnits: 1
                          WriteCapacityUnits: 1

        # A S3 bucket that is used to handle large messages (larger than 128KB)
        MessagesBucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: '${self:custom.messagesBucket}'
                AccessControl: 'PublicRead'
                LifecycleConfiguration:
                    Rules:
                        - Id: 'CleanupRule'
                          Prefix: ''
                          Status: Enabled
                          ExpirationInDays: 1
                CorsConfiguration:
                    CorsRules:
                        - Id: 'AllowReadWriteCorsRule'
                          AllowedMethods: ['GET', 'PUT']
                          AllowedOrigins: ['*']
                          AllowedHeaders: ['*']
                          MaxAge: '3600'
